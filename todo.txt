### update message outside
try{
  previous_msg = e.target.parentElement.previousElementSibling.innerText.split("\n")[0]
  cur_msg_ele = e.target.parentElement.parentElement 
}
catch{
 cur_msg_ele = e.target.parentElement.parentElement
 
 if (cur_msg_ele.classList[1] == "right"){
 previous_msg = e.target.parentElement.parentElement.parentElement.previousElementSibling.innerText.split("\n")[0] 
}
else{
  previous_msg = e.target.parentElement.previousElementSibling.innerText.split("\n")[0] 
}
}
msg =  cur_msg_ele.innerText.split("\n")[0]
console.log(msg)

## sending data
$(".delot").click(function(){
  socket.emit("change",{id:ids,type:"user_d",user:"{{user.username}}",current_user:"{{current_user.username}}",prev_msg:previous_msg,cur_msg:msg})
})
$(".delme").click(function(){
  socket.emit("change",{id:ids,type:"cur_d_me",user:"{{user.username}}",current_user:"{{current_user.username}}",prev_msg:previous_msg,cur_msg:msg})
})
$(".delev").click(function(){
  socket.emit("change",{id:ids,type:"cur_d_all",user:"{{user.username}}",current_user:"{{current_user.username}}",prev_msg:previous_msg,cur_msg:msg})
})

## updating users page
socket.on("change_ok",data => {
    // date
    // data.user == "{{current_user.username}}" ? :
    console.log(data)
    if (data.cur_msg == document.getElementById(`to_${data.user}`).innerText){
    $(`#to_${data.user}`).text(data.msg)
}
else{
    console.log("hi")
}
})

## edit message
$(".edit_chat").click(function(){
  // $("#my_inp").val(e.target.innerText.slice(0,e.target.innerText.length-12))
  // $("#my_inp").focus()
  alert("Coming Soon!!")
})




///
   <div class="form-group mt-2">
                {{ form.email.label(class="form-control-label my-1") }}
                    {% if form.email.errors %}
                        {{ form.email(class="form-control form-control-lg is-invalid") }}
                <div class="invalid-feedback">
                    {% for error in form.email.errors %}
                    <span>
                        {{ error }}
                    </span>
                    {% endfor %}
                </div>
                {% else %}
                        {{ form.email(class="form-control",autocomplete="off") }}
                    {% endif %}
            </div>

// things to do

1. fix mobile view profile and logout btn   - done
4. update the image of the users on users page. - done
5. back button on reset page. - done
7. delete all the messages for me. -  done
12. add 404 page and 500 page - done
13. use abort for unknown users - done
16. make code expire - done

// done now
11. make env file - done
15. make gitignore- done
8. update unseen message on users page - done
14. try using different js files. - done but not as I wanted

// done -  11- 08
10. finishing up 
  1. - add checks - done
  2. - checked for html mismatch tags - done 
  3. - add checks for sending limit message - done
  4. - fix socket update on register pic user. - done
  5. - some finishes

2. restrict user to send message after delete - done
17. update title on msg- done
18. reconnect and connect event - done
5. update when user deletes account - done
3. make hash passwords. -done
19. add recapcha  - done but not adding

14. make readme better
15. final - check everything and deploy to heroku
16. use flask-talisman - undone
20. fix url name errors - done
21 - fixing update issues - done
23 - change status to idle when user not on page - done
24 - change status to editing profile when on profile - done
1. block system - done
8. dark mode -done
9. notification - done
10. bring messages after scrolling - done
22 - update page on reconnect  - done
23. send files - done , only media now

// later ideas 
2. edit message
3. seen unseen , better updating
4. reply message
5. make groups
6. select messages
7. make context menus and dropdowns animated - not done